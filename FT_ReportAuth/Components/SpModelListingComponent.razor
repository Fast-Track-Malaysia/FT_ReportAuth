@using System
@using System.Threading
@using System.Threading.Tasks
@using System.Collections.ObjectModel
@using Microsoft.AspNetCore.Http

@using FT_SpReport.CoreBusiness.Models
@using FT_SpReport.CoreBusiness.Services
@using DevExtreme.AspNet.Data.ResponseModel
@using DevExtreme.AspNet.Data

@inject NavigationManager NavigationManager
@inject SpModelService SpModelService

@using System.Security.Claims
@using Microsoft.AspNetCore.Components.Authorization
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject IHttpContextAccessor  HttpContextAccessor

@if (SpModels != null && SpModels.Length > 0)
{
    <DxDataGrid T="@SpModel" CustomData="@LoadOrderData"
                PageSize="10" ShowFilterRow="true"
                @ref="@grid" RowClick="@OnRowClick">
        <DxDataGridColumn Field="@nameof(SpModel.SpName)" Caption="Query Name"></DxDataGridColumn>
        <DxDataGridColumn Field="@nameof(SpModel.SpDesciption)" Caption="Description"></DxDataGridColumn>
    </DxDataGrid>
    <br />

    <br />
}
else
{
    <b>Nothing found.</b>
}
@code {
    private string _authMessage;
    private string _surnameMessage;
    private IEnumerable<Claim> _claims = Enumerable.Empty<Claim>();

    private async Task GetClaimsPrincipalData()
    {

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;

        if (user.Identity.IsAuthenticated)
        {
            _authMessage = $"{user.Identity.Name} is authenticated.";
            _claims = user.Claims;
            _surnameMessage =
                $"Surname: {user.FindFirst(c => c.Type == ClaimTypes.Surname)?.Value}";
        }
        else
        {
            _authMessage = "The user is NOT authenticated.";
        }
    }
    [Parameter]
    public int Mode { get; set; }

    DxDataGrid<SpModel> grid;
    SpModel[] SpModels;
    protected override async Task OnInitializedAsync()
    {
        string name = HttpContextAccessor.HttpContext.User.Identity.Name;

        var authState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authState.User;
        name = authState.User.Identity.Name;

        if (Mode == 1)
            SpModels = await SpModelService.getAsyncModels();
        else if (Mode == 0)
        {
            if (!string.IsNullOrWhiteSpace(name))
                SpModels = await SpModelService.getAsyncModels(name);
        }
        else  if (Mode == 2)
            SpModels = await SpModelService.getAsyncModels();

    }

    protected Task<LoadResult> LoadOrderData(DataSourceLoadOptionsBase options, CancellationToken cancellationToken)
    {
        return Task.FromResult(DataSourceLoader.Load(SpModels, options));
    }
    void OnRowClick(DataGridRowClickEventArgs<SpModel> args)
    {
        //if (grid.IsDataRowSelected(args.DataItem) && !args.MouseEventArgs.CtrlKey)
        //{
        //    grid.SetDataRowSelected(args.DataItem, false);
        //    args.Handled = true;
        //}
        int id = args.DataItem.Id;
        if (args.MouseEventArgs.Detail == 2) // double click
        {
        }
        else if (args.MouseEventArgs.CtrlKey)
        {
        }
        else
        {
            if (Mode == 1)
                NavigationManager.NavigateTo(NavigationManager.BaseUri + "spmodeledit/" + id.ToString());
            else if (Mode == 0)
                NavigationManager.NavigateTo(NavigationManager.BaseUri + "spparamedit/" + id.ToString() + "/" + args.DataItem.SpName);
            else if (Mode == 2)
                NavigationManager.NavigateTo(NavigationManager.BaseUri + "spassignroleedit/" + SpRoleypeEnum.spmodel.ToString() + "/" + args.DataItem.SpName);
        }
    }
}
